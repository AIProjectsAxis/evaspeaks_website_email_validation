{
  "version": 3,
  "sources": ["../../../../../Phani Kumar/Desktop/Eva/07202025-Working Well_Deployed/netlify/functions/validate-email.ts"],
  "sourceRoot": "C:/Users/PHANIK~1/AppData/Local/Temp/tmp-55728-kqEQ0myYkNAP",
  "sourcesContent": ["const dns = require('dns').promises;\n\nexports.handler = async (event, context) => {\n  // Set CORS headers for browser requests\n  const headers = {\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Headers': 'Content-Type',\n    'Access-Control-Allow-Methods': 'GET, OPTIONS',\n    'Content-Type': 'application/json',\n  };\n\n  // Handle preflight OPTIONS request\n  if (event.httpMethod === 'OPTIONS') {\n    return {\n      statusCode: 200,\n      headers,\n      body: '',\n    };\n  }\n\n  // Only allow GET requests\n  if (event.httpMethod !== 'GET') {\n    return {\n      statusCode: 405,\n      headers,\n      body: JSON.stringify({ valid: false, error: 'Method not allowed' }),\n    };\n  }\n\n  try {\n    // Extract email from query parameters\n    const email = event.queryStringParameters?.email;\n    \n    if (!email) {\n      return {\n        statusCode: 400,\n        headers,\n        body: JSON.stringify({ valid: false, error: 'Email parameter is required' }),\n      };\n    }\n\n    // Validate email format using same regex as client-side\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(email.trim())) {\n      return {\n        statusCode: 400,\n        headers,\n        body: JSON.stringify({ valid: false, error: 'Bad email format' }),\n      };\n    }\n\n    // Extract domain from email\n    const domain = email.split('@')[1]?.toLowerCase();\n    if (!domain) {\n      return {\n        statusCode: 400,\n        headers,\n        body: JSON.stringify({ valid: false, error: 'Bad email format' }),\n      };\n    }\n\n    try {\n      // Check for MX records using Node.js built-in DNS module\n      const mxRecords = await dns.resolveMx(domain);\n      \n      // If we get a non-empty array, domain has mail servers configured\n      if (mxRecords && mxRecords.length > 0) {\n        return {\n          statusCode: 200,\n          headers,\n          body: JSON.stringify({ valid: true }),\n        };\n      } else {\n        return {\n          statusCode: 200,\n          headers,\n          body: JSON.stringify({ valid: false, error: 'No MX records for domain' }),\n        };\n      }\n    } catch (dnsError) {\n      // DNS errors (NXDOMAIN, timeout, etc.) mean domain is not reachable\n      return {\n        statusCode: 200,\n        headers,\n        body: JSON.stringify({ valid: false, error: 'Domain not reachable' }),\n      };\n    }\n\n  } catch (error) {\n    console.error('Email validation error:', error);\n    return {\n      statusCode: 500,\n      headers,\n      body: JSON.stringify({ valid: false, error: 'Internal server error' }),\n    };\n  }\n};"],
  "mappings": ";AAAA,IAAM,MAAM,QAAQ,KAAK,EAAE;AAE3B,QAAQ,UAAU,OAAO,OAAO,YAAY;AAE1C,QAAM,UAAU;AAAA,IACd,+BAA+B;AAAA,IAC/B,gCAAgC;AAAA,IAChC,gCAAgC;AAAA,IAChC,gBAAgB;AAAA,EAClB;AAGA,MAAI,MAAM,eAAe,WAAW;AAClC,WAAO;AAAA,MACL,YAAY;AAAA,MACZ;AAAA,MACA,MAAM;AAAA,IACR;AAAA,EACF;AAGA,MAAI,MAAM,eAAe,OAAO;AAC9B,WAAO;AAAA,MACL,YAAY;AAAA,MACZ;AAAA,MACA,MAAM,KAAK,UAAU,EAAE,OAAO,OAAO,OAAO,qBAAqB,CAAC;AAAA,IACpE;AAAA,EACF;AAEA,MAAI;AAEF,UAAM,QAAQ,MAAM,uBAAuB;AAE3C,QAAI,CAAC,OAAO;AACV,aAAO;AAAA,QACL,YAAY;AAAA,QACZ;AAAA,QACA,MAAM,KAAK,UAAU,EAAE,OAAO,OAAO,OAAO,8BAA8B,CAAC;AAAA,MAC7E;AAAA,IACF;AAGA,UAAM,aAAa;AACnB,QAAI,CAAC,WAAW,KAAK,MAAM,KAAK,CAAC,GAAG;AAClC,aAAO;AAAA,QACL,YAAY;AAAA,QACZ;AAAA,QACA,MAAM,KAAK,UAAU,EAAE,OAAO,OAAO,OAAO,mBAAmB,CAAC;AAAA,MAClE;AAAA,IACF;AAGA,UAAM,SAAS,MAAM,MAAM,GAAG,EAAE,CAAC,GAAG,YAAY;AAChD,QAAI,CAAC,QAAQ;AACX,aAAO;AAAA,QACL,YAAY;AAAA,QACZ;AAAA,QACA,MAAM,KAAK,UAAU,EAAE,OAAO,OAAO,OAAO,mBAAmB,CAAC;AAAA,MAClE;AAAA,IACF;AAEA,QAAI;AAEF,YAAM,YAAY,MAAM,IAAI,UAAU,MAAM;AAG5C,UAAI,aAAa,UAAU,SAAS,GAAG;AACrC,eAAO;AAAA,UACL,YAAY;AAAA,UACZ;AAAA,UACA,MAAM,KAAK,UAAU,EAAE,OAAO,KAAK,CAAC;AAAA,QACtC;AAAA,MACF,OAAO;AACL,eAAO;AAAA,UACL,YAAY;AAAA,UACZ;AAAA,UACA,MAAM,KAAK,UAAU,EAAE,OAAO,OAAO,OAAO,2BAA2B,CAAC;AAAA,QAC1E;AAAA,MACF;AAAA,IACF,SAAS,UAAU;AAEjB,aAAO;AAAA,QACL,YAAY;AAAA,QACZ;AAAA,QACA,MAAM,KAAK,UAAU,EAAE,OAAO,OAAO,OAAO,uBAAuB,CAAC;AAAA,MACtE;AAAA,IACF;AAAA,EAEF,SAAS,OAAO;AACd,YAAQ,MAAM,2BAA2B,KAAK;AAC9C,WAAO;AAAA,MACL,YAAY;AAAA,MACZ;AAAA,MACA,MAAM,KAAK,UAAU,EAAE,OAAO,OAAO,OAAO,wBAAwB,CAAC;AAAA,IACvE;AAAA,EACF;AACF;",
  "names": []
}
